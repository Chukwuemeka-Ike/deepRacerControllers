	/*
		  Algorithm to Park the car from beside tag 1 ((Taken from Ballinas et al.))
		    Givens: Steering angle:0.9 = 30 deg = pi/6,
		            wheelbase, L: 0.162m,
		            robot width, W: 0.193m,
		            rear axle to rear bumper, p: 0.035m,
		            initial points, (Xs, Ys), and
		            minimum distances (xmin,ymin)
		    Output: Whole path P
		    void pathPlanner(float angle, float L, float W, float p, float Xs, float Ys
		                    float xmin, float ymin)
		    {
		    // Calculate distance R
		    float R = L/(tan(angle));

		    // Find intersection point Yt
		    float Yt = R-(ymin+(W/2));

		    // Calculate aperture angle alpha
		    float alpha = angle; // Will test this, but I believe the turn angle is equal

		    // Calculate intersection point Xt
		    float Xt = R*cos(alpha);

		    // Calculate the minimum parking spot distance
		    Mmin = (2*Xt)+p-xmin;

		    // Calculate the goal position
		    float Xg = (Mmin/2) + xmin + (L/2) + p;
		    float Yg = R-(W+ymin);
		    float Yf = Yg;
		    float Xf = Mmin-p;
		    float P = (Xs,Ys)(Xt,Yt)+(Xt,Yt)(Xf,Yf)+(Xf,Yf)(Xg,Yg)

		  }
*/
